<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Kyle Roth</title><link>https://kylrth.com/tags/programming/</link><description>Recent content in Programming on Kyle Roth</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 17 Apr 2025 13:19:47 -0400</lastBuildDate><atom:link href="https://kylrth.com/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Jupyter Lab Hub in Docker with Nvidia GPU support</title><link>https://kylrth.com/post/jupyter-lab/</link><pubDate>Tue, 19 Oct 2021 20:28:25 -0400</pubDate><guid>https://kylrth.com/post/jupyter-lab/</guid><description>&lt;p>This is how I set up my headless home server with a Jupyter Lab Docker container with an Nvidia GPU runtime. Login is handled by a GitHub OAuth application.&lt;/p>
&lt;h2 id="nvidia-drivers-and-the-container-runtime">Nvidia drivers and the container runtime &lt;a class="header-link" href="#nvidia-drivers-and-the-container-runtime">&lt;svg class="c-links__icon">&lt;title>permalink&lt;/title>&lt;use xlink:href="#icon-permalink">&lt;/use>&lt;/svg>&lt;/a>&lt;/h2>
&lt;p>First, check &lt;a href="https://docs.nvidia.com/cuda/archive/11.4.2/cuda-toolkit-release-notes/index.html">here&lt;/a> (replacing the CUDA version in the URL with your own) to see which Nvidia drivers you need for the CUDA toolkit version you want. I&amp;rsquo;m using CUDA 11.4.2, which means I need at least driver version 470.&lt;span class="sidenote-number">&lt;small class="sidenote">You can use &lt;code>sudo apt purge nvidia-*&lt;/code> to cleanly remove older drivers (or broken installs) before installing the desired version.&lt;/small>&lt;/span>&lt;/p></description></item><item><title>I really just want to edit and compile my LaTeX files in VS Code</title><link>https://kylrth.com/post/latex-vscode/</link><pubDate>Mon, 12 Jul 2021 21:43:47 -0600</pubDate><guid>https://kylrth.com/post/latex-vscode/</guid><description>&lt;p>LaTeX has a ton of different flavors, releases, and installations: &lt;a href="https://en.wikipedia.org/wiki/MacTeX">MacTeX&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/MiKTeX">MiKTeX&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/TeXworks">TeXworks&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/XeTeX">XeTeX&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/PdfTeX">pdfTeX&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/LuaTeX">LuaTeX&lt;/a>&amp;hellip; If you&amp;rsquo;re using Linux and just want to edit LaTeX files in Visual Studio Code and have them automatically rendered as PDFs, follow these instructions:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>On Arch-based distros, install the packages listed &lt;a href="https://wiki.archlinux.org/title/TeX_Live">here&lt;/a>. On Debian-based systems, &lt;code>sudo apt install texlive&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install some Perl dependencies:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo cpan Log::Log4perl Log::LogDispatch Log::Dispatch::File YAML::Tiny File::HomeDir
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>If you want to use FontAwesome on Arch-based systems, install the &lt;code>oft-font-awesome&lt;/code> package and then do the following (&lt;a href="https://wiki.archlinux.org/title/TeX_Live#Making_fonts_available_to_Fontconfig">source&lt;/a>):&lt;/p></description></item><item><title>using GPG to prove you wrote your code</title><link>https://kylrth.com/post/gpg/</link><pubDate>Mon, 12 Apr 2021 07:13:54 -0600</pubDate><guid>https://kylrth.com/post/gpg/</guid><description>&lt;p>GPG is cool. You can use GPG to send encrypted messages, sign files to prove you generated them, and sign git commits to prove you committed them. You can get my key &lt;a href="https://kylrth.com/gpg.pub">here&lt;/a>. DigitalOcean has a &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-gpg-to-encrypt-and-sign-messages">neat guide&lt;/a> to getting started with GPG. It explains asymmetric encryption, key generation and revocation, and key signing and maintenance.&lt;/p>
&lt;p>Git commit authorship can be modified by anyone, as demonstrated by &lt;a href="https://github.com/jayphelps/git-blame-someone-else">this tool&lt;/a>. But by uploading your GPG public key to GitHub, you allow anyone who trusts GitHub to be sure that commits marked &amp;ldquo;verified&amp;rdquo; were actually created by you.&lt;/p></description></item><item><title>Removing a keyword from git history</title><link>https://kylrth.com/post/removing-keyword-from-git-history/</link><pubDate>Wed, 02 Dec 2020 11:34:25 -0700</pubDate><guid>https://kylrth.com/post/removing-keyword-from-git-history/</guid><description>&lt;p>I recently had to remove a keyword from the git history of a project I was working on. This meant not just &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/removing-sensitive-data-from-a-repository#using-filter-branch">removing a file&lt;/a> but modifying commits where the keyword was added, commits where the keyword was removed, and even commits with the keyword in the commit message. I eventually came to the right solution through a mix of blog posts and the documentation for &lt;a href="https://git-scm.com/docs/git-rebase/">&lt;code>git rebase&lt;/code>&lt;/a>.&lt;/p>
&lt;p>For this example, assume the keyword is &amp;ldquo;matrix&amp;rdquo;. The example output shown is from the git repo for this website.&lt;/p></description></item></channel></rss>